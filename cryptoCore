# Crypto Core - Keegan Bowen

############################
#      ALIAS SECTION       #
############################

# gpg alias section
# pass the key to gpgp and get detailed information
alias gpgp='gpg --list-packets'
# list out the keyring of the current user
alias gpgl='gpg --list-keys'

# openssl alias section
# populate the info interactively and generate a new rsa key
alias grsa='openssl req -x509 -sha256 -nodes -days 365 -newkey rsa:2048'
# self signed cert
alias grsas='openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365'
# remove password from an rsa key
alias removekeypass='openssl rsa -in privateKey.pem -out newPrivateKey.pem'
# pass the certificate to checkcrt to get the info
alias checkcrt='openssl x509 -text -noout -in '
# generate md5 hashes for certificate.crt privateKey.key and CSR.csr
alias hashcheck='openssl x509 -noout -modulus -in certificate.crt | openssl md5; openssl rsa -noout -modulus -in privateKey.key | openssl md5; openssl req -noout -modulus -in CSR.csr | openssl md5'
# check on a pk12
alias checkpk12p='openssl pkcs12 -info -in'
# request a sign
alias requestsign='openssl req -newkey rsa:2048 -sha256 -nodes -out servercert.csr -outform PEM'

alias speedtest='openssl speed'

alias extractrsapub='openssl rsa -in rsa-key.pem -pubout > rsa.pub'
alias extractpubfromcert='openssl x509 -in extract.crt  -noout -pubkey > cert.pub'
alias ecckey='openssl ecparam -out ecc.key -name prime256v1 -genkey'
alias rsa4096='openssl genrsa 4096'
alias rsa2048='openssl genrsa 2048'
alias newcsr='openssl req -out CSR.csr -new -key ' # pass the key name after the alias like: newcsr mykey.key
alias checkcsr='openssl req -text -noout -verify -in' # pass the csr name like: checkcsr CSR.csr
alias checkkey='openssl rsa -check -in' # pass the key name like: checkkey mykey.key
alias checkcrt='openssl x509 -text -noout -in' # pass the cert name like: checkcrt mycert.crt
alias gencacert='openssl req -new -x509 -key ./ca.key -out ca.crt'
alias signcsr='openssl x509 -req -days 360 -in CSR.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out example.crt -sha256'
alias signv3='openssl x509 -req -days 365 -in CSR.csr -extfile v3.ext -CA ca.crt -CAkey ca.key -CAcreateserial -out example.crt -sha256'
alias gendh2048='openssl dhparam -out /etc/dhparam-2048 2048'
alias gendh4096='openssl dhparam -out /etc/dhparam-4096 4096'
alias rand64='openssl rand -base64 32' # redirect to a file


############################
#    PRACTICAL FUNCTIONS   #
############################


# ECC manual operations with openssl

gensecp () {
  openssl ecparam -name secp384r1 -genkey -noout -out secp384r1.pem
  openssl ec -in secp384r1.pem -pubout -out secp384r1.pub
}

derive () {
  openssl pkeyutl -derive -inkey secp384r1.pem -peerkey peerpub.pem -out secret.bin
}

ecenc () {
  openssl enc -aes256 -base64 -k $(base64 secret.bin) -e -in $1 -out $2
}

ecdec () {
  openssl enc -aes256 -base64 -k $(base64 secret.bin) -d -in $1 -out p$2
}


# RSA manual operations with openssl

# osenc-setup 
osenc-setup () {
  openssl genrsa 4096 > secret-rsa.pem
  openssl rsa -in secret-rsa.pem -pubout -outform pem > rsa.pub
}

# osenc-passgen
osenc-enc-pass () {
  openssl rand -base64 32 > key.bin
  openssl rsautl -encrypt -inkey rsa.pub -pubin -in key.bin -out key.bin.enc
}

# osenc my-secretfile.txt mysecretfile.txt.asc
osenc-file () { 
  openssl enc -aes256 -base64 -salt -in $1 -out $2 -pass file:./key.bin
}

# osenc-decrypt mysecretfile.txt.asc my-secretfile.txt
osenc-decrypt () {
  openssl rsautl -decrypt -inkey secret-rsa.pem -in key.bin.enc -out key.bin 
  openssl enc -d -aes256 -base64 -in $1 -out $2 -pass file:./key.bin 
}


# RSA signing and verify with openssl

rsasign () {
  openssl rsautl -sign -in input.txt -inkey rsa.pem -out output.sign
}

rsaverify () {
  openssl rsautl -verify -in output.sign -inkey rsa.pub -pubin
}


# usage of this openssl/libressl thing with the functions above involves both sides(people and/or computer) to do it correctly
# pgp (gpg) public key encryption is a much better solution
# but some machines or situations can't use gpg but can use openssl

# Example situation where Person B needs to share secrets with Person A.

# Person A runs the functions contents like:
# $ osenc-setup
# $ cp rsa.pub Person-A.rsa.pub
# Then Person A sends Person-A.rsa.pub to Person B. 

# Person B runs the functions contents like:
# $ cp Person-A.rsa.pub rsa.pub
# $ osenc-passgen
# $ osenc-file Person-B-secret-for-Person-A.txt Person-B-secret-for-Person-A.txt.asc
# $ cp key.bin.enc Person-B-key.bin.enc
# Then Person B sends the Person-B-secret-for-Person-A.txt.asc file along with Person-B-key.bin.enc

# Then person A can decrypt Person B's key.bin.enc, and then decrypt Person-B-secret-for-Person-A.txt.asc
# like so:
# $ cp Person-B-key.bin.enc key.bin.enc 
# $ osenc-decrypt

getpin () {
echo "enter site:";
read hashsite &&
openssl s_client -servername "$hashsite" -connect "$hashsite":443 | openssl x509 -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64;
}


############################
#    ADHOC BINARY XOR      #
############################

# adhoc-crypto on the disk
# for academic purposes

# Convert common decimals to binary.
# The int2bin function can only handle 20 character inputs at a time.
int2bin () {
    num="$1"
    bin=""
    padding=""
    base2=(0 1)
    while [ "$num" -gt 0 ]; do
        bin=${base2[$(($num % 2))]}$bin
        num=$(($num / 2))
    done
    if [ $((8 - (${#bin} % 8))) -ne 8 ]; then
        printf -v padding '%*s' $((8 - (${#bin} % 8))) ''
        padding=${padding// /0}
    fi
    echo $padding$bin
}

# Call tr program to remove whitespace of all kinds
# to prepare for bitwise XOR.
stripper () {
tr -d '\040\011\012\015'
}

# Convert binary to decimal. This thing needs work.
bin2dec () {
    echo $((2#$1))
}

# Return the seed length.
msglgth () {
SETMSGLGTH=$(cat ~/seeds/a.xor | wc -c)
}

# Bitwise XOR.
exor () {
bash ~/Scripts/xor.sh
}
# Repeat n times command.
repeat () {
    local i max
    max=$1; shift;
    for ((i=1; i <= max ; i++)); do
        eval "$@";
    done
}
# One-time-pad batch XOR.
otpbatch () {
for datasets in $(ls ~/seeds/*); do 
    cat $datasets | stripper > ~/seeds/b.xor; 
    exor > "$datasets".output; 
done 2> /dev/null &
}

# Same as otpbatch but with verbose output
reqbatch () {
for datasets in $(ls ~/seeds/*); do
echo "setting $datasets to b.xor";
cat $datasets | stripper > ~/seeds/b.xor;
echo "now b.xor is $(cat ~/seeds/b.xor)";
echo "XOR $datasets against a.xor - $(cat ~/seeds/a.xor)"
exor > "$datasets".output;
done 2> /dev/null 
}

# Run a validation check on the seed files.
libvalidate () {
for data in $(ls ~/seeds/*); do
    echo "$data"; 
    cat "$data" | wc -c; 
    echo "$data stripped"; 
    cat "$data" | stripper | wc -c; 
done
}

# Generate a medium sized library of binary digits for playing with.
libgen () { 
    for x in {1000..9999}; 
        do int2bin "$x" > "$x".xor ; 
    done
}
